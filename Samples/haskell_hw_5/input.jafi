# 1. Given a list of strings, return a list where each string has "y" added at its end, omitting any resulting strings that contain "yy" as a substring anywhere.
def yyNotIn(listA){
    if eq(len(listA), 1)
        then True
        else if `(eq(head(listA), 'y') and eq(head(tail(listA)), 'y'))
            then False 
            else yyNotIn(tail(listA))
}

def noYY(listA){
    compose(filter(yyNotIn), map(\x : `(x + "y")))(listA)
}

# 2. Given a list of non-negative integers, return a list of those numbers multiplied by 2, omitting any of the resulting numbers that end in 2.
def two2(listA){
    compose(filter(\x : not_eq(`(x % 10), 2)), map(*(2)))(listA)
}

#3. Given a list of integers, return a list of those numbers squared and the product added to 10, omitting any of the resulting numbers that end in 5 or 6.
def ommit56(listA){
    filter(\x : `(not_eq(`(x % 10), 6) and not_eq(`(x % 10), 5)), listA)
}

def square56(listA){
    compose(ommit56, map(\x : `(10 + `(x * x))))(listA)
}
