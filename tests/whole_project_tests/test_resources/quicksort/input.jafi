#Adapted from https://stackoverflow.com/questions/7717691/why-is-the-minimalist-example-haskell-quicksort-not-a-true-quicksort
def lesser(listA){
    filter(\x : `(x < head(listA)), tail(listA))
}

def greater(listA){
    filter(\x : `(x >= head(listA)), tail(listA))
}

def quicksort(listA){
    if eq(len(listA), 0)
        then listA
        else
            `(`(quicksort(lesser(listA)) + list(head(listA))) 
                + quicksort(greater(listA)))
}

quicksort(list())
quicksort(list(1))
quicksort(list(1, 2, 3))
quicksort(list(1, 3, 2))
quicksort(list(34, 125, 1234, 12, 354, 123, 56))
quicksort(list(234, 23, 25, 23, 12, 34))
